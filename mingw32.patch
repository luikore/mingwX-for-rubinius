diff -rupN rubinius-1.0.0/configure rubinius-1.0.0.mingw32/configure
--- rubinius-1.0.0/configure	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/configure	2010-05-18 22:10:06 +0800
@@ -3,6 +3,8 @@
 require 'rbconfig'
 require 'tempfile'
 require 'fileutils'
+require "rubygems"
+require "rake" # for hacked FileUtils.sh
 
 root = File.expand_path File.dirname(__FILE__)
 
@@ -49,7 +51,7 @@ class Configure
     end
 
     # TODO: conditionalize for Windows
-    @host = `./rakelib/config.guess`.chomp
+    @host = `#{'bash' if RUBY_PLATFORM =~ /mingw|mswin/} ./rakelib/config.guess`.chomp
     /([^-]+)-([^-]+)-(.*)/ =~ @host
     @cpu, @vendor, @os = $1, $2, $3
 
@@ -223,7 +225,7 @@ class Configure
       http.get_response(URI(url)) do |res|
         return false if res.is_a?(Net::HTTPClientError)
         size, total = 0, res.header['Content-Length'].to_i
-        File.open full_path, "w" do |f|
+        File.open full_path, "wb" do |f|
           res.read_body do |chunk|
             f << chunk
             size += chunk.size
@@ -292,7 +294,7 @@ class Configure
 
     if File.exists?(path)
       print "  Unpacking prebuilt LLVM source: "
-      system "cd vm/external_libs; tar xjf prebuilt/llvm-2.6-source.tar.bz2"
+      FileUtils.send :sh, "cd vm/external_libs; tar xjf prebuilt/llvm-2.6-source.tar.bz2"
       puts "done!"
 
       if File.exists?("vm/external_libs/llvm/include")
@@ -316,7 +318,7 @@ class Configure
 
     if File.exists?(file)
       print "  Unpacking prebuilt LLVM for #{@host}: "
-      system "cd vm/external_libs; mkdir llvm; cd llvm; tar xjf ../prebuilt/llvm-#{@host}.tar.bz2"
+      sh "cd vm/external_libs; mkdir llvm; cd llvm; tar xjf ../prebuilt/llvm-#{@host}.tar.bz2"
       puts "done!"
       @llvm = :prebuilt
       return true
diff -rupN rubinius-1.0.0/lib/ext/bigdecimal/.depends.mf rubinius-1.0.0.mingw32/lib/ext/bigdecimal/.depends.mf
--- rubinius-1.0.0/lib/ext/bigdecimal/.depends.mf	1970-01-01 08:00:00 +0800
+++ rubinius-1.0.0.mingw32/lib/ext/bigdecimal/.depends.mf	2010-05-19 20:36:40 +0800
@@ -0,0 +1,6 @@
+bigdecimal.o: \
+  bigdecimal.c \
+  bigdecimal.h \
+  ../../../vm/capi/defines.h \
+  ../../../vm/capi/intern.h \
+  ../../../vm/capi/ruby.h
diff -rupN rubinius-1.0.0/lib/ext/melbourne/melbourne.cpp rubinius-1.0.0.mingw32/lib/ext/melbourne/melbourne.cpp
--- rubinius-1.0.0/lib/ext/melbourne/melbourne.cpp	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/lib/ext/melbourne/melbourne.cpp	2010-05-18 22:30:52 +0800
@@ -26,6 +26,9 @@ VALUE melbourne_file_to_ast(VALUE self, 
   }
 }
 
+#ifdef WIN32
+__declspec(dllexport)
+#endif
 void Init_melbourne(void) {
   VALUE rb_cMelbourne;
 
diff -rupN rubinius-1.0.0/lib/ffi/const_generator.rb rubinius-1.0.0.mingw32/lib/ffi/const_generator.rb
--- rubinius-1.0.0/lib/ffi/const_generator.rb	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/lib/ffi/const_generator.rb	2010-05-19 10:31:01 +0800
@@ -61,7 +61,7 @@ module FFI
     end
 
     def calculate
-      binary = File.join Dir.tmpdir, "rb_const_gen_bin_#{Process.pid}"
+      binary = File.join Dir.tmpdir, "rb_const_gen_bin_#{Process.pid}#{'.exe' if RUBY_PLATFORM =~ /mingw|mswin/}"
 
       Tempfile.open("#{@prefix}.const_generator") do |f|
         f.puts "#include <stdio.h>"
@@ -84,7 +84,8 @@ module FFI
         f.puts "\n\treturn 0;\n}"
         f.flush
 
-        output = `gcc -D_DARWIN_USE_64_BIT_INODE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -x c -Wall -Werror #{f.path} -o #{binary} 2>&1`
+        # FIXME removed -Werror for compile ( warning: long unsigned int -> %d )
+        output = `gcc -D_DARWIN_USE_64_BIT_INODE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -x c -Wall #{f.path} -o #{binary} 2>&1`
 
         unless $?.success? then
           output = output.split("\n").map { |l| "\t#{l}" }.join "\n"
@@ -93,7 +94,7 @@ module FFI
       end
 
       output = `#{binary}`
-      File.unlink binary
+      File.unlink binary rescue nil # unlink doesn't work for windows
 
       output.each_line do |line|
         line =~ /^(\S+)\s(.*)$/
diff -rupN rubinius-1.0.0/lib/ffi/struct_generator.rb rubinius-1.0.0.mingw32/lib/ffi/struct_generator.rb
--- rubinius-1.0.0/lib/ffi/struct_generator.rb	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/lib/ffi/struct_generator.rb	2010-05-19 10:31:37 +0800
@@ -51,7 +51,7 @@ module FFI
     end
 
     def calculate
-      binary = "rb_struct_gen_bin_#{Process.pid}"
+      binary = "rb_struct_gen_bin_#{Process.pid}#{'.exe' if RUBY_PLATFORM =~ /mingw|mswin/}"
 
       raise "struct name not set" if @struct_name.nil?
 
@@ -87,7 +87,7 @@ module FFI
       end
 
       output = `./#{binary}`.split "\n"
-      File.unlink(binary)
+      File.unlink(binary) rescue nil # unlink doesn't work for windows
 
       sizeof = output.shift
       unless @size
diff -rupN rubinius-1.0.0/rakelib/dependency_grapher.rb rubinius-1.0.0.mingw32/rakelib/dependency_grapher.rb
--- rubinius-1.0.0/rakelib/dependency_grapher.rb	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/rakelib/dependency_grapher.rb	2010-05-18 21:37:55 +0800
@@ -18,6 +18,7 @@
 # the parse tree is executed.
 
 require 'set'
+require 'pathname' # for relative path calculation
 
 class DependencyGrapher
   class ExpressionEvaluator
@@ -112,6 +113,15 @@ class DependencyGrapher
 
       width = str.size
       @dependencies.each do |name|
+        # the ':' in windows is not separator,
+        # but full path have ':',
+        # so use relative path names instead
+        if RUBY_PLATFORM =~ /mingw|mswin/
+          curr_path = File.expand_path FileUtils.pwd
+          name = File.expand_path name
+          name = Pathname.new(name).relative_path_from Pathname.new(curr_path)
+        end
+
         size = name.size + 1
         if width + size > max
           width = 0
diff -rupN rubinius-1.0.0/rakelib/ext_helper.rb rubinius-1.0.0.mingw32/rakelib/ext_helper.rb
--- rubinius-1.0.0/rakelib/ext_helper.rb	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/rakelib/ext_helper.rb	2010-05-19 20:27:22 +0800
@@ -94,6 +94,7 @@ def add_mri_capi
 
   $LIBS << " #{DEFAULT["LIBS"]}"
   $LIBS << " #{DEFAULT["DLDLIBS"]}"
+  $LIBS << " #{DEFAULT["LIBRUBYARG"]}" # -lmsvcrt-ruby18 (for win32)
 
   add_ldflag DEFAULT["LDSHARED"].split[1..-1].join(' ')
   add_ldflag DEFAULT["LDFLAGS"]
@@ -105,6 +106,7 @@ def add_mri_capi
     add_link_dir DEFAULT["archdir"]
   else
     add_include_dir DEFAULT["archdir"]
+    add_link_dir DEFAULT["libdir"] # -L (for win32)
   end
 end
 
@@ -127,7 +129,9 @@ when /mswin32/, /mingw32/, /bccwin32/
   #check_heads(%w[windows.h winsock.h], true)
   #check_libs(%w[kernel32 rpcrt4 gdi32], true)
 
-  if GNU_CHAIN
+  # NOTE: With heavily used POSIX functions,
+  # windows compilers other than mingw-gcc can never get to here
+  if true or (defined?(GNU_CHAIN) and GNU_CHAIN)
     $LDSHARED = "#{$CXX} -shared -lstdc++"
   else
     add_define "-EHs", "-GR"
diff -rupN rubinius-1.0.0/rakelib/install.rake rubinius-1.0.0.mingw32/rakelib/install.rake
--- rubinius-1.0.0/rakelib/install.rake	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/rakelib/install.rake	2010-05-18 21:43:00 +0800
@@ -130,7 +130,7 @@ namespace :install do
 
       # Install the Rubinius executable
       exe = "#{BUILD_CONFIG[:bindir]}/#{BUILD_CONFIG[:program_name]}"
-      install "vm/vm", install_dir(exe), :mode => 0755, :verbose => true
+      install "vm/vm#{'.exe' if RUBY_PLATFORM =~ /mingw|mswin/}", install_dir(exe), :mode => 0755, :verbose => true
     end
   end
 end
diff -rupN rubinius-1.0.0/rakelib/platform.rake rubinius-1.0.0.mingw32/rakelib/platform.rake
--- rubinius-1.0.0/rakelib/platform.rake	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/rakelib/platform.rake	2010-05-18 21:44:37 +0800
@@ -75,8 +75,8 @@ file 'runtime/platform.conf' => deps do 
     s.field :st_gid, :gid_t
     s.field :st_rdev, :dev_t
     s.field :st_size, :off_t
-    s.field :st_blksize
-    s.field :st_blocks
+    s.field :st_blksize if RUBY_PLATFORM !~ /mingw|mswin/
+    s.field :st_blocks if RUBY_PLATFORM !~ /mingw|mswin/
     s.field :st_atime, :time_t
     s.field :st_mtime, :time_t
     s.field :st_ctime, :time_t
diff -rupN rubinius-1.0.0/rakelib/vm.rake rubinius-1.0.0.mingw32/rakelib/vm.rake
--- rubinius-1.0.0/rakelib/vm.rake	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/rakelib/vm.rake	2010-05-19 09:33:57 +0800
@@ -14,7 +14,7 @@ config.compile_with_llvm = false
 CONFIG = config
 
 
-task :vm => 'vm/vm'
+task :vm => "vm/vm#{'.exe' if RUBY_PLATFORM =~ /mingw|mswin/}"
 
 ############################################################
 # Files, Flags, & Constants
@@ -168,6 +168,8 @@ if RUBY_PLATFORM =~ /darwin/i
   unless `#{CC} -v 2>&1` =~ /gcc version 4\.3/i
     FLAGS << "-mdynamic-no-pic"
   end
+elsif RUBY_PLATFORM =~ /mingw|win32/i
+  FLAGS.concat %w(-Dalloca=__builtin_alloca)
 end
 
 if LLVM_ENABLE
@@ -233,6 +235,7 @@ def ld(t)
 
   link_opts += ' -Wl,--export-dynamic' if RUBY_PLATFORM =~ /linux/i
   link_opts += ' -rdynamic'            if RUBY_PLATFORM =~ /bsd/
+  link_opts += ' -Wl,--export-all-symbols' if RUBY_PLATFORM =~ /mingw|mswin/
 
   # Include LDFLAGS
   if str = ENV['LDFLAGS']
@@ -259,7 +262,17 @@ def ld(t)
   end
 
   l  = ex_libs.join(' ')
-
+  if RUBY_PLATFORM =~ /mingw|mswin/
+    l.sub! 'libtommath.a -ldl', 'libtommath.a'
+    # -l should be put after object files
+    # mingwX: missing posix function stubs
+    # ws2_32: for most win32 APIs
+    # imagehlp: for EnumerateLoadedModules
+    # psapi: for GetProcessMemoryInfo
+    # kernel32: for TerminateProcess
+    l << ' -lmingwX -lws2_32 -lpthread -lcrypt -limagehlp -lpsapi -lkernel32'
+  end
+  
   if $verbose
     sh "#{ld} #{link_opts} -o #{t.name} #{o} #{l}"
   else
@@ -305,11 +318,38 @@ namespace :build do
   task :llvm do
     if LLVM_ENABLE and Rubinius::BUILD_CONFIG[:llvm] == :svn
       unless File.file?("vm/external_libs/llvm/Release/bin/llvm-config")
-        sh "cd vm/external_libs/llvm; ./configure #{llvm_config_flags} && #{make}"
+        Rake::Task['build:llvm_config'].invoke
+        Rake::Task['build:llvm_make'].invoke        
       end
     end
   end
 
+  desc "Show FFI env for building LLVM"
+  task :show_ffi_env do
+    ffi = File.expand_path 'vm/external_libs/libffi'
+    puts %Q[export C_INCLUDE_PATH="#{ffi}/include"]
+    puts %Q[export CPLUS_INCLUDE_PATH="#{ffi}/include"]
+    puts %Q[export LIBRARY_PATH="#{ffi}/.libs"]
+  end
+
+  desc "Config LLVM"
+  task :llvm_config do
+    udis86 = File.expand_path 'vm/external_libs/udis86'
+    config_llvm = "./configure #{llvm_config_flags}" # --with-udis86=#{udis86}"
+
+    config_llvm = "bash #{config_llvm}" if RUBY_PLATFORM =~ /mingw|mswin/
+    sh "cd vm/external_libs/llvm; #{config_llvm}"
+  end
+
+  desc "Make LLVM"
+  task :llvm_make do
+    make_llvm = make
+    if RUBY_PLATFORM =~ /mingw|mswin/
+      make_llvm << ' -k CXXFLAGS+=-fexceptions -k CXXFLAGS+=-Dalloca=__builtin_alloca'
+    end
+    sh "cd vm/external_libs/llvm; #{make_llvm}"
+  end
+
   # Issue the actual build commands. NEVER USE DIRECTLY.
   task :build => BUILD_PRETASKS +
                  %w[
@@ -323,7 +363,14 @@ namespace :build do
   # Flag setup
 
   task :normal_flags do
-    FLAGS.concat %w[ -ggdb3 -O2 -Werror ]
+    # mingw can't survive
+    FLAGS.concat(
+      if RUBY_PLATFORM =~ /mingw|mswin/
+        %w[ -O2 ]
+      else
+        %w[ -ggdb3 -O2 -Werror ]
+      end
+    )
   end
 
   task :inline_flags => :normal_flags do
@@ -470,9 +517,14 @@ files EXTERNALS do |t|
   configure_path = File.join(path, 'configure')
 
   if File.exist? configure_path then
-    sh "cd #{path}; ./configure && #{make}"
+    sh "cd #{path};#{'bash' if RUBY_PLATFORM =~ /mingw|mswin/} ./configure;#{make}"
   else
-    sh "cd #{path}; #{make}"
+    make_externals = make
+    if RUBY_PLATFORM =~ /mingw|mswin/
+      # mingw doesn't have CC and CXX set without configure
+      make_externals << ' -k CC=gcc -k CXX=g++'
+    end
+    sh "cd #{path}; #{make_externals}"    
   end
 end
 
@@ -487,7 +539,7 @@ end
 files TYPE_GEN, field_extract_headers + %w[vm/codegen/field_extract.rb] + [:run_field_extract] do
 end
 
-file 'vm/vm' => EXTERNALS + objs + vm_objs do |t|
+file "vm/vm#{'.exe' if RUBY_PLATFORM =~ /mingw|mswin/}" => EXTERNALS + objs + vm_objs do |t|
   ld t
 end
 
@@ -577,6 +629,9 @@ file "vm/gen/instruction_effects.hpp" =>
 end
 
 namespace :vm do
+  desc "Build all externals"
+  task :externals => EXTERNALS
+  
   desc 'Run all VM tests.  Uses its argument as a filter of tests to run.'
   task :test, :filter do |task, args|
     ENV['SUITE'] = args[:filter] if args[:filter]
@@ -631,7 +686,7 @@ namespace :vm do
       'vm/test/runner',
       'vm/test/runner.cpp',
       'vm/test/runner.o',
-      'vm/vm',
+      (RUBY_PLATFORM =~ /mingw|mswin/ ? 'vm/vm.exe' : 'vm/vm'),
       'vm/.deps'
     ].exclude("vm/gen/config.h")
 
@@ -644,7 +699,7 @@ namespace :vm do
   task :distclean => :clean do
     EXTERNALS.each do |lib|
       path = File.join(*(lib.split(File::SEPARATOR)[0..-2].reject{|i| i =~ /^\./}))
-      system "cd #{path}; #{make} clean || true"
+      sh "cd #{path}; #{make} clean || true"
     end
   end
 
diff -rupN rubinius-1.0.0/vm/agent.cpp rubinius-1.0.0.mingw32/vm/agent.cpp
--- rubinius-1.0.0/vm/agent.cpp	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/vm/agent.cpp	2010-05-18 22:19:23 +0800
@@ -25,7 +25,11 @@ namespace rubinius {
 
     // To avoid TIME_WAIT / EADDRINUSE
     int on = 1;
+#ifdef __MINGW32__
+	setsockopt(server_fd_, SOL_SOCKET, SO_REUSEADDR, (const char*)(&on), sizeof(on));
+#else
     setsockopt(server_fd_, SOL_SOCKET, SO_REUSEADDR, &on, sizeof(on));
+#endif
 
     struct sockaddr_in sin = {0};
     sin.sin_family = AF_INET;
diff -rupN rubinius-1.0.0/vm/builtin/io.cpp rubinius-1.0.0.mingw32/vm/builtin/io.cpp
--- rubinius-1.0.0/vm/builtin/io.cpp	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/vm/builtin/io.cpp	2010-05-19 09:12:14 +0800
@@ -27,7 +27,18 @@
 
 #include "native_thread.hpp"
 
+#ifdef __MINGW32__
+/* fake pipe() and ttyname() */
+#include <unistd.h>
+
+/* fix invalid conversion from uint8_t* to char* */
+static int recvfrom(SOCKET a, uint8_t* b, int c, int d, sockaddr* e, int* f) {
+  return recvfrom(a, (char*)b, c, d, e, f);
+}
+#endif
+
 namespace rubinius {
+
   void IO::init(STATE) {
     GO(io).set(state->new_class("IO", G(object)));
     G(io)->set_object_type(state, IOType);
@@ -547,6 +558,11 @@ namespace rubinius {
       break;
     }
 
+#ifdef __MINGW32__
+	/* FIXME getnameinfo not implemented on windows */
+	Array* ary = Array::create(state, 0);
+	return ary;
+#else
     int e = getnameinfo(addr, len, buf, NI_MAXHOST, pbuf, NI_MAXSERV,
                         NI_NUMERICHOST | NI_NUMERICSERV);
 
@@ -568,6 +584,7 @@ namespace rubinius {
     ary->set(state, 3, host);
 
     return ary;
+#endif
   }
 
   static const char* unixpath(struct sockaddr_un *sockaddr, socklen_t len) {
@@ -896,12 +913,12 @@ failed: /* try next '*' position */
   }
 
   void IO::set_nonblock(STATE) {
-    int flags = fcntl(descriptor_->to_native(), F_GETFL);
+    int flags = fcntl(to_fd(), F_GETFL);
     if(flags == -1) return;
 
     if((flags & O_NONBLOCK) == 0) {
       flags |= O_NONBLOCK;
-      fcntl(descriptor_->to_native(), F_SETFL, flags);
+      fcntl(to_fd(), F_SETFL, flags);
     }
   }
 
diff -rupN rubinius-1.0.0/vm/builtin/randomizer.cpp rubinius-1.0.0.mingw32/vm/builtin/randomizer.cpp
--- rubinius-1.0.0/vm/builtin/randomizer.cpp	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/vm/builtin/randomizer.cpp	2010-05-18 22:29:26 +0800
@@ -18,6 +18,13 @@
 #include <sys/stat.h>
 #include <fcntl.h>
 
+#ifdef __MINGW32__
+// from process.h
+extern "C" {
+	_CRTIMP pid_t __cdecl __MINGW_NOTHROW getpid (void);
+}
+#undef create
+#endif
 
 /*
 
diff -rupN rubinius-1.0.0/vm/builtin/string.cpp rubinius-1.0.0.mingw32/vm/builtin/string.cpp
--- rubinius-1.0.0/vm/builtin/string.cpp	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/vm/builtin/string.cpp	2010-05-18 22:29:48 +0800
@@ -22,6 +22,10 @@
 #include <iostream>
 #include <ctype.h>
 
+#ifdef __MINGW32__
+#include <crypt.h>
+#endif
+
 namespace rubinius {
 
   void String::init(STATE) {
diff -rupN rubinius-1.0.0/vm/builtin/thread.hpp rubinius-1.0.0.mingw32/vm/builtin/thread.hpp
--- rubinius-1.0.0/vm/builtin/thread.hpp	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/vm/builtin/thread.hpp	2010-05-18 23:01:26 +0800
@@ -188,7 +188,7 @@ namespace rubinius {
      *
      *  @see  Thread::allocate().
      */
-    static Thread* create(STATE, VM* target, pthread_t tid = 0);
+    static Thread* create(STATE, VM* target, pthread_t tid = tid0);
 
 
   public:   /* Instance methods */
diff -rupN rubinius-1.0.0/vm/builtin/time.cpp rubinius-1.0.0.mingw32/vm/builtin/time.cpp
--- rubinius-1.0.0/vm/builtin/time.cpp	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/vm/builtin/time.cpp	2010-05-18 22:30:04 +0800
@@ -101,8 +101,10 @@ namespace rubinius {
     }
 
     tm.tm_wday = -1;
+#ifndef __MINGW32__
     tm.tm_gmtoff = 0;
     tm.tm_zone = 0;
+#endif
     tm.tm_year = year->to_native() - 1900;
 
     tm.tm_isdst = isdst->to_native();
diff -rupN rubinius-1.0.0/vm/capi/io.cpp rubinius-1.0.0.mingw32/vm/capi/io.cpp
--- rubinius-1.0.0/vm/capi/io.cpp	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/vm/capi/io.cpp	2010-05-19 09:19:33 +0800
@@ -39,7 +39,9 @@ extern "C" {
     int ready = 0;
 
     NativeMethodEnvironment* env = NativeMethodEnvironment::get();
-    GlobalLock& lock = env->state()->global_lock();
+	/* on windows, one of the headers would include windows.h,
+	 * which defines GlobalLock as API function */
+	rubinius::GlobalLock& lock = env->state()->global_lock();
     lock.unlock();
 
     while(!ready) {
@@ -58,7 +60,7 @@ extern "C" {
     int ready = 0;
 
     NativeMethodEnvironment* env = NativeMethodEnvironment::get();
-    GlobalLock& lock = env->state()->global_lock();
+    rubinius::GlobalLock& lock = env->state()->global_lock();
     lock.unlock();
 
     while(!ready) {
@@ -77,7 +79,7 @@ extern "C" {
     int ready = 0;
 
     NativeMethodEnvironment* env = NativeMethodEnvironment::get();
-    GlobalLock& lock = env->state()->global_lock();
+    rubinius::GlobalLock& lock = env->state()->global_lock();
     lock.unlock();
 
     while(!ready) {
diff -rupN rubinius-1.0.0/vm/external_libs/libtommath/makefile rubinius-1.0.0.mingw32/vm/external_libs/libtommath/makefile
--- rubinius-1.0.0/vm/external_libs/libtommath/makefile	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/vm/external_libs/libtommath/makefile	2010-05-19 20:49:42 +0800
@@ -5,7 +5,9 @@
 #version of library 
 VERSION=0.41
 
-CFLAGS  +=  -I./ -Wall -W -Wshadow -Wsign-compare -fPIC
+CC = gcc
+
+CFLAGS  +=  -I. -Wall -W -Wshadow -Wsign-compare -fPIC
 
 ifndef MAKE
    MAKE=make
diff -rupN rubinius-1.0.0/vm/ffi_util.cpp rubinius-1.0.0.mingw32/vm/ffi_util.cpp
--- rubinius-1.0.0/vm/ffi_util.cpp	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/vm/ffi_util.cpp	2010-05-18 22:27:12 +0800
@@ -27,7 +27,7 @@ void ffi_set_errno(int n) {
   errno = n;
 }
 
-#ifdef timezone
+#if defined(timezone) || defined(_timezone) || defined(__MINGW32__)
 time_t ffi_timezone() {
   return timezone;
 }
@@ -58,6 +58,9 @@ int ffi_daylight() {
 }
 */
 
+#ifndef uintptr_t
+  typedef unsigned int* uintptr_t;
+#endif
 uintptr_t ffi_address(void *ptr) {
   return (uintptr_t)ptr;
 }
@@ -146,6 +149,13 @@ unsigned int ffi_cast(unsigned int val) 
   return val;
 }
 
+#ifdef __MINGW32__
+/* FIXME is it right? */
+#  define major(x)	((0 == ((x)&0xff000000))?(x):((x)>>24))
+#  define minor(x)	((0 == ((x)&0xff000000))?0:((x)&0x00ffffff))
+#  define mkdev(x, y)	(((x)<<24)|((y)&0x00ffffff))
+#endif
+
 long ffi_major(dev_t n) {
   return major(n);
 }
@@ -167,7 +177,7 @@ int ffi_fstat(int filedes, struct stat *
   return fstat(filedes, buf);
 }
 
-int ffi_lstat(const char *path, struct stat *buf) {
+int ffi_lstat(const char *path, struct stat *buf) {  
   return lstat(path, buf);
 }
 
diff -rupN rubinius-1.0.0/vm/native_libraries.hpp rubinius-1.0.0.mingw32/vm/native_libraries.hpp
--- rubinius-1.0.0/vm/native_libraries.hpp	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/vm/native_libraries.hpp	2010-05-19 20:00:45 +0800
@@ -2,7 +2,7 @@
 #define RBX_VM_NATIVE_LIBRARIES_HPP
 
 
-#ifdef _WIN32
+#ifdef WIN32
   #define RBX_LIBSUFFIX ".dll"
 #else
   #ifdef __APPLE_CC__
diff -rupN rubinius-1.0.0/vm/native_thread.hpp rubinius-1.0.0.mingw32/vm/native_thread.hpp
--- rubinius-1.0.0/vm/native_thread.hpp	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/vm/native_thread.hpp	2010-05-19 09:05:50 +0800
@@ -11,7 +11,7 @@ namespace rubinius {
     VM* vm_;
 
   public:
-    NativeThread(VM*, size_t stack_size = 0, pthread_t tid = 0);
+    NativeThread(VM*, size_t stack_size = 0, pthread_t tid = tid0);
     void perform();
 
     VM* vm() {
diff -rupN rubinius-1.0.0/vm/util/thread.hpp rubinius-1.0.0.mingw32/vm/util/thread.hpp
--- rubinius-1.0.0/vm/util/thread.hpp	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/vm/util/thread.hpp	2010-05-18 22:28:37 +0800
@@ -16,6 +16,20 @@
 
 #define pthread_check(expr) if((expr) != 0) { assert(0 && "failed: " #expr); }
 
+/* hacking pthreads to fix compile errors with mingw */
+#ifdef __MINGW32__
+static std::ostream& operator<<(std::ostream& o, const pthread_t& tid) {
+  o << ((int)tid.p);
+  return o;
+}
+/* default tid */
+static pthread_t tid0 = {0, 0};
+#define if_t(tid) (tid.p != 0)
+#else
+static pthread_t tid0 = {0, 0};
+#define if_t(tid) (tid != 0)
+#endif /* __MINGW32__ */
+
 namespace thread {
   enum Code {
     cLocked,
@@ -94,11 +108,11 @@ namespace thread {
     }
 
   public:
-    Thread(size_t stack_size = 0, pthread_t tid = 0)
+    Thread(size_t stack_size = 0, pthread_t tid = tid0)
       : native_(tid)
       , stack_size_(stack_size)
     {
-      delete_on_exit_ = (tid != 0);
+      delete_on_exit_ = if_t(tid);
     }
 
     virtual ~Thread() { }
diff -rupN rubinius-1.0.0/vm/util/time.c rubinius-1.0.0.mingw32/vm/util/time.c
--- rubinius-1.0.0/vm/util/time.c	2010-05-15 01:21:35 +0800
+++ rubinius-1.0.0.mingw32/vm/util/time.c	2010-05-19 09:29:17 +0800
@@ -412,7 +412,9 @@ out_of_range:
 
 #include <math.h>
 
+#ifndef __MINGW32__
 #define HAVE_TM_ZONE    1
+#endif
 
 /* defaults: season to taste */
 #define SYSV_EXT	1	/* stuff in System V ascftime routine */
